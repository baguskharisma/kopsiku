// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  DRIVER
  CUSTOMER
  OBSERVER
}

enum FleetType {
  TAXI
  TRAVEL
  MOTORCYCLE    // Added for ojek/gojek type
  CAR_SMALL     // Economy car (M)
  CAR_LARGE     // Large car (L)
  CAR_PREMIUM   // Premium car (XL)
}

enum FleetStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  QRIS
  EWALLET
  CREDIT_CARD
  DEBIT_CARD
  COINS          // Added for coin payment
}

enum OrderStatus {
  PENDING
  DRIVER_ASSIGNED
  DRIVER_ACCEPTED
  DRIVER_ARRIVING
  IN_PROGRESS
  COMPLETED
  CANCELLED_BY_CUSTOMER
  CANCELLED_BY_DRIVER
  CANCELLED_BY_SYSTEM
  EXPIRED
  NO_DRIVER_AVAILABLE
}

enum DriverStatus {
  PENDING_VERIFICATION
  ACTIVE
  OFFLINE
  BUSY
  SUSPENDED
  INACTIVE
  MAINTENANCE_MODE
}

enum VehicleType {
  MOTORCYCLE  // M - Motorcycle/Ojek
  ECONOMY    // L - Economy Car
  PREMIUM    // XL - Premium Car
  LUXURY     // XXL - Luxury Car
}

enum LocationCategory {
  POPULAR
  RECENT
  FAVORITE
  HOME
  WORK
  CUSTOM
}

enum TripType {
  INSTANT     // Immediate ride
  SCHEDULED   // Scheduled for later
  RECURRING   // Recurring trips
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// New enums for coin system
enum CoinTransactionType {
  TOP_UP          // Manual top up by admin
  DEDUCTION       // Deduction for order operational fee
  REFUND          // Refund for cancelled orders
  BONUS           // Promotional bonus
  ADJUSTMENT      // Manual adjustment by admin
  OPERATIONAL_FEE // Operational fee deduction (10% of base fare)
  COMMISSION      // Platform commission
}

enum CoinTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
  PROCESSING      // Added for better status tracking
}

// Models
model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name         String
  username     String?        @unique
  email        String?        @unique
  phone        String         @unique
  passwordHash String         @map("password_hash")
  role         Role           @default(CUSTOMER)
  avatarUrl    String?        @map("avatar_url")
  isActive     Boolean        @default(true) @map("is_active")
  isVerified   Boolean        @default(false) @map("is_verified")
  lastLoginAt  DateTime?      @map("last_login_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")

  // Relations (existing + new)
  driverProfile        DriverProfile?
  fleetAssignments     FleetAssignment[]
  orders               Order[]           @relation("CustomerOrders")
  driverOrders         Order[]           @relation("DriverOrders")
  refreshTokens        RefreshToken[]
  otps                 Otp[]
  auditLogs            AuditLog[]
  userLocations        UserLocation[]
  ratings              Rating[]          @relation("UserRatings")
  receivedRatings      Rating[]          @relation("DriverRatings")
  
  // Coin-related relations
  coinWallet           CoinWallet?
  coinTransactions     CoinTransaction[]
  topUpRequests        CoinTopUpRequest[] @relation("CustomerTopUpRequests")
  processedTopUps      CoinTopUpRequest[] @relation("AdminProcessedTopUps")
  coinSpendingLimit    CoinSpendingLimit? // New relation

  @@index([phone])
  @@index([email])
  @@index([role, isActive])
  @@index([createdAt])
  @@map("users")
}

model DriverProfile {
  id                String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String                @unique @map("user_id") @db.VarChar
  
  // License & Identity
  licenseNumber     String                @unique @map("license_number")
  licenseExpiry     DateTime              @map("license_expiry")
  idCardNumber      String?               @unique @map("id_card_number")
  address           String
  emergencyContact  String                @map("emergency_contact")
  bankAccount       String?               @map("bank_account")
  bankName          String?               @map("bank_name")

  // QR Code for Bank Account - NEW FIELD
  qrImageUrl        String?               @map("qr_image_url") // URL/path to QR code image containing bank account details
  qrImageUploadedAt DateTime?             @map("qr_image_uploaded_at") // Timestamp when QR was uploaded
  qrImageVerified   Boolean               @default(false) @map("qr_image_verified") // Whether QR has been verified by admin
  qrImageVerifiedBy String?               @map("qr_image_verified_by") // Admin ID who verified the QR
  qrImageVerifiedAt DateTime?             @map("qr_image_verified_at") // When QR was verified
  
  // Verification
  isVerified        Boolean               @default(false) @map("is_verified")
  verifiedAt        DateTime?             @map("verified_at")
  verifiedBy        String?               @map("verified_by")
  verificationNotes String?               @map("verification_notes")
  
  // Performance Metrics
  rating            Float                 @default(0) @db.Real
  totalTrips        Int                   @default(0) @map("total_trips")
  completedTrips    Int                   @default(0) @map("completed_trips")
  cancelledTrips    Int                   @default(0) @map("cancelled_trips")
  totalEarnings     BigInt                @default(0) @map("total_earnings")
  
  // Location & Status
  currentLat        Float?                @map("current_lat") @db.Real
  currentLng        Float?                @map("current_lng") @db.Real
  lastLocationUpdate DateTime?            @map("last_location_update")
  driverStatus      DriverStatus          @default(PENDING_VERIFICATION) @map("driver_status")
  statusChangedAt   DateTime?             @map("status_changed_at")
  
  // Preferences
  maxRadius         Float                 @default(10) @map("max_radius") @db.Real // km
  preferredVehicleTypes VehicleType[]     @map("preferred_vehicle_types")
  
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  // Relations
  statusHistory     DriverStatusHistory[]
  
  @@index([driverStatus])
  @@index([rating])
  @@index([isVerified])
  @@index([currentLat, currentLng]) // Geospatial queries
  @@map("driver_profiles")
}

// New Coin Models
model CoinWallet {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique @map("user_id") @db.VarChar
  
  balance       BigInt   @default(0) // Balance in smallest coin unit
  totalTopUp    BigInt   @default(0) @map("total_top_up")
  totalSpent    BigInt   @default(0) @map("total_spent")
  totalOperationalFees BigInt @default(0) @map("total_operational_fees") // Track operational fees separately
  
  // Enhanced security
  version       Int      @default(1) // For optimistic locking
  lastTransactionAt DateTime? @map("last_transaction_at")
  
  // Status and security
  isActive      Boolean  @default(true) @map("is_active")
  isFrozen      Boolean  @default(false) @map("is_frozen")
  frozenReason  String?  @map("frozen_reason")
  frozenAt      DateTime? @map("frozen_at")
  frozenBy      String?  @map("frozen_by")
  
  // Limits for security
  dailySpendLimit BigInt? @map("daily_spend_limit")
  monthlySpendLimit BigInt? @map("monthly_spend_limit")
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@index([userId])
  @@index([isActive, isFrozen])
  @@index([lastTransactionAt])
  @@map("coin_wallets")
}

model CoinTransaction {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String                @map("user_id") @db.VarChar
  
  // Transaction details
  type            CoinTransactionType
  status          CoinTransactionStatus @default(PENDING)
  amount          BigInt                // Positive for credit, negative for debit
  description     String
  
  // Balance tracking (important for audit)
  balanceBefore   BigInt                @map("balance_before")
  balanceAfter    BigInt                @map("balance_after")
  
  // Reference data
  referenceType   String?               @map("reference_type") // "order", "top_up_request", "manual", "operational_fee"
  referenceId     String?               @map("reference_id")
  orderId         String?               @map("order_id") @db.VarChar
  topUpRequestId  String?               @map("top_up_request_id") @db.VarChar
  
  // Operational fee specific data
  operationalFeeConfig Json?            @map("operational_fee_config") // Snapshot of fee config used
  distanceFareAmount  BigInt?           @map("distance_fare_amount") // Distance fare amount for operational fee calculation
  feePercentage   Float?                @map("fee_percentage") // Fee percentage used
  
  // Processing info
  processedBy     String?               @map("processed_by")
  processedAt     DateTime?             @map("processed_at")
  
  // Additional data
  metadata        Json?
  notes           String?
  
  // Security and integrity
  idempotencyKey  String?               @unique @map("idempotency_key")
  transactionHash String?               @map("transaction_hash") // For additional security
  
  // Audit trail
  ipAddress       String?               @map("ip_address")
  userAgent       String?               @map("user_agent")
  
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  // Relations
  order           Order?                @relation(fields: [orderId], references: [id])
  topUpRequest    CoinTopUpRequest?     @relation(fields: [topUpRequestId], references: [id])
  
  @@index([userId, createdAt])
  @@index([type, status])
  @@index([referenceType, referenceId])
  @@index([orderId])
  @@index([topUpRequestId])
  @@index([createdAt])
  @@index([status, processedAt])
  @@map("coin_transactions")
}

model CoinTopUpRequest {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  requestNumber   String                @unique @map("request_number") // Human-readable request ID
  
  // User and admin relations
  customer        User                  @relation("CustomerTopUpRequests", fields: [customerId], references: [id])
  customerId      String                @map("customer_id") @db.VarChar
  processedBy     User?                 @relation("AdminProcessedTopUps", fields: [processedById], references: [id])
  processedById   String?               @map("processed_by_id") @db.VarChar
  
  // Request details
  requestedAmount BigInt                @map("requested_amount")
  approvedAmount  BigInt?               @map("approved_amount")
  reason          String
  urgencyLevel    String                @default("NORMAL") @map("urgency_level") // NORMAL, HIGH, URGENT
  
  // Payment information
  paymentProof    String?               @map("payment_proof")
  paymentMethod   String?               @map("payment_method")
  paymentDetails  Json?                 @map("payment_details")
  bankTransferDetails Json?             @map("bank_transfer_details") // Bank account, reference number, etc.
  
  // Status and processing
  status          CoinTransactionStatus @default(PENDING)
  adminNotes      String?               @map("admin_notes")
  rejectionReason String?               @map("rejection_reason")
  
  // Customer communication
  customerNotes   String?               @map("customer_notes") // Customer's additional notes
  contactPreference String?             @map("contact_preference") // PHONE, EMAIL, WHATSAPP
  
  // Workflow
  reviewedAt      DateTime?             @map("reviewed_at") // When admin first reviewed
  approvedAt      DateTime?             @map("approved_at") // When approved by admin
  
  // Timestamps
  requestedAt     DateTime              @default(now()) @map("requested_at")
  processedAt     DateTime?             @map("processed_at")
  expiresAt       DateTime?             @map("expires_at")
  
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  // Relations
  coinTransactions CoinTransaction[]
  
  @@index([customerId, status])
  @@index([processedById, status])
  @@index([status, requestedAt])
  @@index([urgencyLevel, status])
  @@index([requestNumber])
  @@map("coin_top_up_requests")
}

// New model for tracking daily/monthly spending limits
model CoinSpendingLimit {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @map("user_id") @db.VarChar
  
  // Limits
  dailyLimit      BigInt   @map("daily_limit")
  monthlyLimit    BigInt   @map("monthly_limit")
  
  // Current usage (reset daily/monthly)
  dailySpent      BigInt   @default(0) @map("daily_spent")
  monthlySpent    BigInt   @default(0) @map("monthly_spent")
  
  // Reset tracking
  lastDailyReset  DateTime @default(now()) @map("last_daily_reset")
  lastMonthlyReset DateTime @default(now()) @map("last_monthly_reset")
  
  // Status
  isActive        Boolean  @default(true) @map("is_active")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@unique([userId])
  @@index([userId, isActive])
  @@map("coin_spending_limits")
}

model Fleet {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  type        FleetType
  plateNumber String        @unique @map("plate_number")
  model       String
  brand       String
  year        Int
  color       String
  capacity    Int           @default(4)
  status      FleetStatus   @default(ACTIVE)
  vehicleType VehicleType   @map("vehicle_type")
  
  // Vehicle specifications
  engineNumber String?      @map("engine_number")
  chassisNumber String?     @map("chassis_number")
  registrationExpiry DateTime? @map("registration_expiry")
  insuranceExpiry DateTime? @map("insurance_expiry")
  lastMaintenanceAt DateTime? @map("last_maintenance_at")
  nextMaintenanceAt DateTime? @map("next_maintenance_at")
  
  // Pricing
  basePriceMultiplier Float @default(1.0) @map("base_price_multiplier") @db.Real
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  // Relations
  assignments FleetAssignment[]
  orders      Order[]

  @@index([status, vehicleType])
  @@index([type])
  @@index([plateNumber])
  @@map("fleets")
}

model FleetAssignment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  fleet     Fleet     @relation(fields: [fleetId], references: [id], onDelete: Cascade)
  fleetId   String    @map("fleet_id") @db.VarChar
  driver    User      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId  String    @map("driver_id") @db.VarChar
  isActive  Boolean   @default(true) @map("is_active")
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")

  @@unique([fleetId, driverId, isActive]) // One active assignment per fleet-driver
  @@index([fleetId, isActive])
  @@index([driverId, isActive])
  @@map("fleet_assignments")
}

model PricingRule {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name            String
  vehicleType     VehicleType @map("vehicle_type")
  baseFare        BigInt      @map("base_fare") // In cents/smallest currency unit
  perKmRate       BigInt      @map("per_km_rate")
  perMinuteRate   BigInt      @map("per_minute_rate")
  minimumFare     BigInt      @map("minimum_fare")
  surgeMultiplier Float       @default(1.0) @map("surge_multiplier") @db.Real
  
  // Coin pricing (optional, for coin-based payments)
  baseFareCoins   BigInt?     @map("base_fare_coins") // Base fare in coins
  perKmRateCoins  BigInt?     @map("per_km_rate_coins") // Per km rate in coins
  perMinuteRateCoins BigInt?  @map("per_minute_rate_coins") // Per minute rate in coins
  minimumFareCoins BigInt?    @map("minimum_fare_coins") // Minimum fare in coins
  
  // Time-based pricing
  isActive        Boolean     @default(true) @map("is_active")
  validFrom       DateTime    @map("valid_from")
  validTo         DateTime?   @map("valid_to")
  
  // Geofencing (optional)
  applicableAreas Json?       @map("applicable_areas") // GeoJSON polygons
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index([vehicleType, isActive])
  @@index([validFrom, validTo])
  @@map("pricing_rules")
}

model Order {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar

  // Relations (existing)
  fleet            Fleet?               @relation(fields: [fleetId], references: [id])
  fleetId          String?              @map("fleet_id") @db.VarChar
  driver           User?                @relation("DriverOrders", fields: [driverId], references: [id])
  driverId         String?              @map("driver_id") @db.VarChar
  customer         User?               @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId       String?             @map("customer_id") @db.VarChar

  // Order metadata (existing)
  orderNumber      String              @unique @map("order_number")
  tripType         TripType            @default(INSTANT) @map("trip_type")
  scheduledAt      DateTime?           @map("scheduled_at")
  
  // Passenger details (existing)
  passengerName    String              @map("passenger_name")
  passengerPhone   String              @map("passenger_phone")
  specialRequests  String?             @map("special_requests")
  
  // Route information (existing)
  pickupAddress    String              @map("pickup_address")
  pickupLat        Float               @map("pickup_lat") @db.Real
  pickupLng        Float               @map("pickup_lng") @db.Real
  dropoffAddress   String              @map("dropoff_address")
  dropoffLat       Float               @map("dropoff_lat") @db.Real
  dropoffLng       Float               @map("dropoff_lng") @db.Real
  
  // Trip details (existing)
  requestedVehicleType VehicleType     @map("requested_vehicle_type")
  distanceMeters   Int?                @map("distance_meters")
  estimatedDurationMinutes Int?        @map("estimated_duration_minutes")
  actualDurationMinutes Int?           @map("actual_duration_minutes")

  // Fare calculation (existing)
  baseFare         BigInt              @map("base_fare")
  distanceFare     BigInt              @default(0) @map("distance_fare")
  timeFare         BigInt              @default(0) @map("time_fare")
  airportFare      BigInt              @default(0) @map("airport_fare")
  surgeFare        BigInt              @default(0) @map("surge_fare")
  additionalFare   BigInt              @default(0) @map("additional_fare")
  discount         BigInt              @default(0) @map("discount")
  totalFare        BigInt              @map("total_fare")
  
  // Enhanced operational fee tracking
  operationalFeeCoins BigInt?          @default(0) @map("operational_fee_coins") // Operational fee charged in coins
  operationalFeePercent Float?         @map("operational_fee_percent") // Percentage used for calculation
  operationalFeeConfig Json?           @map("operational_fee_config") // Snapshot of config used
  operationalFeeStatus String?         @default("PENDING") @map("operational_fee_status") // PENDING, CHARGED, FAILED, WAIVED
  operationalFeeChargedAt DateTime?    @map("operational_fee_charged_at")
  operationalFeeTransactionId String? @map("operational_fee_transaction_id") // Reference to coin transaction
  
  // Coin-based fare (existing but enhanced)
  baseFareCoins    BigInt?             @map("base_fare_coins")
  distanceFareCoins BigInt?            @default(0) @map("distance_fare_coins")
  timeFareCoins    BigInt?             @default(0) @map("time_fare_coins")
  airportFareCoins BigInt?             @default(0) @map("airport_fare_coins")
  surgeFareCoins   BigInt?             @default(0) @map("surge_fare_coins")
  additionalFareCoins BigInt?          @default(0) @map("additional_fare_coins")
  discountCoins    BigInt?             @default(0) @map("discount_coins")
  totalFareCoins   BigInt?             @map("total_fare_coins")
  
  // Payment (existing)
  paymentMethod    PaymentMethod       @map("payment_method")
  paymentStatus    PaymentStatus       @default(PENDING) @map("payment_status")

  // Status & timing (existing)
  status           OrderStatus         @default(PENDING)
  
  driverAssignedAt DateTime?           @map("driver_assigned_at")
  driverAcceptedAt DateTime?           @map("driver_accepted_at")
  driverArrivedAt  DateTime?           @map("driver_arrived_at")
  tripStartedAt    DateTime?           @map("trip_started_at")
  tripCompletedAt  DateTime?           @map("trip_completed_at")
  
  // Cancellation (existing)
  cancelledAt      DateTime?           @map("cancelled_at")
  cancelledReason  String?             @map("cancelled_reason")
  cancellationFee  BigInt              @default(0) @map("cancellation_fee")
  cancellationFeeCoins BigInt?         @default(0) @map("cancellation_fee_coins")
  
  // System fields (existing)
  idempotencyKey   String?             @unique @map("idempotency_key")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relations (existing)
  statusHistory    OrderStatusHistory[]
  payment          Payment?
  rating           Rating?
  coinTransactions CoinTransaction[]

  @@index([customerId, status, createdAt])
  @@index([driverId, status, createdAt])
  @@index([status, scheduledAt])
  @@index([orderNumber])
  @@index([pickupLat, pickupLng])
  @@index([paymentMethod, paymentStatus])
  @@index([operationalFeeStatus]) // New index for operational fee queries
  @@map("orders")
}

model Location {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name        String
  address     String
  lat         Float            @db.Real
  lng         Float            @db.Real
  category    LocationCategory @default(POPULAR)
  icon        String?
  description String?
  isActive    Boolean          @default(true) @map("is_active")
  searchCount Int              @default(0) @map("search_count") // For popularity tracking
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  
  // Relations
  userLocations UserLocation[]
  
  @@index([category, isActive])
  @@index([lat, lng]) // Geospatial queries
  @@index([searchCount]) // Popular locations
  @@map("locations")
}

model UserLocation {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String           @map("user_id") @db.VarChar
  location   Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String           @map("location_id") @db.VarChar
  category   LocationCategory @default(RECENT)
  alias      String?          // Custom name like "Home", "Office"
  accessCount Int             @default(0) @map("access_count")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  
  @@unique([userId, locationId])
  @@index([userId, category])
  @@map("user_locations")
}

model Rating {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String   @unique @map("order_id") @db.VarChar
  
  // Ratings (1-5 scale)
  ratedBy    User     @relation("UserRatings", fields: [ratedById], references: [id])
  ratedById  String   @map("rated_by_id") @db.VarChar
  ratedUser  User     @relation("DriverRatings", fields: [ratedUserId], references: [id])
  ratedUserId String  @map("rated_user_id") @db.VarChar
  
  rating     Int      // 1-5 stars
  comment    String?
  tags       String[] // ["clean_vehicle", "polite_driver", "fast_service"]
  
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@index([ratedUserId])
  @@index([rating])
  @@map("ratings")
}

model OrderStatusHistory {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String      @map("order_id") @db.VarChar
  fromStatus OrderStatus @map("from_status")
  toStatus  OrderStatus @map("to_status")
  reason    String?
  metadata  Json?       // Additional context data
  changedBy String?     @map("changed_by") // userId who changed (nullable for system)
  createdAt DateTime    @default(now()) @map("created_at")
  
  @@index([orderId, createdAt])
  @@map("order_status_histories")
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String        @unique @map("order_id") @db.VarChar
  
  // Payment details
  paymentMethod   PaymentMethod @map("payment_method")
  provider        String        // MIDTRANS, XENDIT, MANUAL, COINS, etc.
  providerId      String?       @map("provider_id")
  providerOrderId String?       @map("provider_order_id")
  
  // Amounts
  amount          BigInt
  platformFee     BigInt        @default(0) @map("platform_fee")
  driverEarning   BigInt        @default(0) @map("driver_earning")
  
  // Coin payment specific
  coinAmount      BigInt?       @map("coin_amount") // Amount in coins if paid with coins
  coinTransactionId String?     @map("coin_transaction_id") // Reference to coin transaction
  
  // Status
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?     @map("paid_at")
  
  // Additional data
  rawResponse     Json?         @map("raw_response")
  failureReason   String?       @map("failure_reason")
  refundAmount    BigInt        @default(0) @map("refund_amount")
  refundedAt      DateTime?     @map("refunded_at")
  
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  @@index([status, createdAt])
  @@index([provider, providerId])
  @@index([paymentMethod])
  @@map("payments")
}

model Otp {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  phone     String
  codeHash  String   @map("code_hash")
  purpose   String   // register|login|reset|verify_phone
  attempts  Int      @default(0)
  maxAttempts Int    @default(3) @map("max_attempts")
  isUsed    Boolean  @default(false) @map("is_used")
  userId    String?  @map("user_id") @db.VarChar // Nullable for registration
  user      User?    @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@index([phone, purpose, isUsed])
  @@index([expiresAt])
  @@map("otps")
}

model RefreshToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id") @db.VarChar
  tokenHash  String   @unique @map("token_hash")
  deviceId   String?  @map("device_id") // For device-specific tokens
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  revokedAt  DateTime? @map("revoked_at")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")
  
  @@index([userId, isRevoked])
  @@index([tokenHash])
  @@map("refresh_tokens")
}

model DriverStatusHistory {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  driverId     String        @map("driver_id") @db.VarChar
  driver       DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  fromStatus   DriverStatus  @map("from_status")
  toStatus     DriverStatus  @map("to_status")
  reason       String?
  metadata     Json?         // Additional context
  changedBy    String?       @map("changed_by") // adminId or userId who triggered
  createdAt    DateTime      @default(now()) @map("created_at")

  @@index([driverId, createdAt])
  @@index([toStatus, createdAt])
  @@map("driver_status_histories")
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  action     String   // CREATE, UPDATE, DELETE, LOGIN, COIN_TOP_UP, COIN_DEDUCTION, etc.
  resource   String   // users, orders, fleets, coin_wallets, coin_transactions, etc.
  resourceId String?  @map("resource_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @map("user_id") @db.VarChar // Nullable for system actions
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@index([resource, action, createdAt])
  @@index([userId, createdAt])
  @@index([createdAt]) // For cleanup jobs
  @@map("audit_logs")
}

// Configuration and system tables
model AppConfig {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  key         String   @unique
  value       String
  description String?
  type        String   @default("string") // string, number, boolean, json
  isPublic    Boolean  @default(false) @map("is_public") // Can be accessed by frontend
  updatedBy   String?  @map("updated_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([key])
  @@index([isPublic])
  @@map("app_configs")
}

model OperationalFeeConfig {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name                  String   // Configuration name like "Standard Fee", "Premium Fee"
  
  // Fee structure
  percentageOfBaseFare  Float    @default(0.10) @map("percentage_of_base_fare") // 10% default
  minimumFeeCoins       BigInt?  @map("minimum_fee_coins") // Minimum fee in coins
  maximumFeeCoins       BigInt?  @map("maximum_fee_coins") // Maximum fee in coins
  flatFeeCoins          BigInt?  @map("flat_fee_coins") // Optional flat fee
  
  // Applicability
  vehicleTypes          VehicleType[] @map("vehicle_types") // Which vehicle types this applies to
  userRoles             Role[]    // Which user roles this applies to
  
  // Conditions
  isActive              Boolean  @default(true) @map("is_active")
  validFrom             DateTime @default(now()) @map("valid_from")
  validTo               DateTime? @map("valid_to")
  
  // Geofencing (optional)
  applicableAreas       Json?    @map("applicable_areas") // GeoJSON polygons
  
  // Order conditions
  minimumOrderValue     BigInt?  @map("minimum_order_value") // Minimum order value to apply fee
  maximumOrderValue     BigInt?  @map("maximum_order_value") // Maximum order value to apply fee
  
  // Metadata
  description           String?
  metadata              Json?    // Additional configuration
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdBy             String?  @map("created_by") // Admin who created this config
  
  @@index([isActive, validFrom, validTo])
  @@index([vehicleTypes])
  @@map("operational_fee_configs")
}