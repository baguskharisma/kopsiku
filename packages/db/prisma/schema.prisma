// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  DRIVER
  CUSTOMER
}

enum FleetType {
  TAXI
  TRAVEL
  MOTORCYCLE    // Added for ojek/gojek type
  CAR_SMALL     // Economy car (M)
  CAR_LARGE     // Large car (L)
  CAR_PREMIUM   // Premium car (XL)
}

enum FleetStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  QRIS
  EWALLET
  CREDIT_CARD
  DEBIT_CARD
}

enum OrderStatus {
  PENDING
  DRIVER_ASSIGNED
  DRIVER_ACCEPTED
  DRIVER_ARRIVING
  IN_PROGRESS
  COMPLETED
  CANCELLED_BY_CUSTOMER
  CANCELLED_BY_DRIVER
  CANCELLED_BY_SYSTEM
  EXPIRED
  NO_DRIVER_AVAILABLE
}

enum DriverStatus {
  PENDING_VERIFICATION
  ACTIVE
  OFFLINE
  BUSY
  SUSPENDED
  INACTIVE
  MAINTENANCE_MODE
}

enum VehicleType {
  MOTORCYCLE  // M - Motorcycle/Ojek
  ECONOMY    // L - Economy Car
  PREMIUM    // XL - Premium Car
  LUXURY     // XXL - Luxury Car
}

enum LocationCategory {
  POPULAR
  RECENT
  FAVORITE
  HOME
  WORK
  CUSTOM
}

enum TripType {
  INSTANT     // Immediate ride
  SCHEDULED   // Scheduled for later
  RECURRING   // Recurring trips
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Models
model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name         String
  username     String?        @unique
  email        String?        @unique
  phone        String         @unique // Required for taxi app
  passwordHash String         @map("password_hash")
  role         Role           @default(CUSTOMER)
  avatarUrl    String?        @map("avatar_url")
  isActive     Boolean        @default(true) @map("is_active")
  isVerified   Boolean        @default(false) @map("is_verified")
  lastLoginAt  DateTime?      @map("last_login_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")

  // Relations
  driverProfile     DriverProfile?
  fleetAssignments  FleetAssignment[]
  orders            Order[]           @relation("CustomerOrders")
  driverOrders      Order[]           @relation("DriverOrders")
  refreshTokens     RefreshToken[]
  otps              Otp[]
  auditLogs         AuditLog[]
  userLocations     UserLocation[]
  ratings           Rating[]          @relation("UserRatings")
  receivedRatings   Rating[]          @relation("DriverRatings")

  @@index([phone])
  @@index([email])
  @@index([role, isActive])
  @@index([createdAt])
  @@map("users")
}

model DriverProfile {
  id                String                @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String                @unique @map("user_id") @db.VarChar
  
  // License & Identity
  licenseNumber     String                @unique @map("license_number")
  licenseExpiry     DateTime              @map("license_expiry")
  idCardNumber      String?               @unique @map("id_card_number")
  address           String
  emergencyContact  String                @map("emergency_contact")
  bankAccount       String?               @map("bank_account")
  bankName          String?               @map("bank_name")
  
  // Verification
  isVerified        Boolean               @default(false) @map("is_verified")
  verifiedAt        DateTime?             @map("verified_at")
  verifiedBy        String?               @map("verified_by")
  verificationNotes String?               @map("verification_notes")
  
  // Performance Metrics
  rating            Float                 @default(0) @db.Real
  totalTrips        Int                   @default(0) @map("total_trips")
  completedTrips    Int                   @default(0) @map("completed_trips")
  cancelledTrips    Int                   @default(0) @map("cancelled_trips")
  totalEarnings     BigInt                @default(0) @map("total_earnings")
  
  // Location & Status
  currentLat        Float?                @map("current_lat") @db.Real
  currentLng        Float?                @map("current_lng") @db.Real
  lastLocationUpdate DateTime?            @map("last_location_update")
  driverStatus      DriverStatus          @default(PENDING_VERIFICATION) @map("driver_status")
  statusChangedAt   DateTime?             @map("status_changed_at")
  
  // Preferences
  maxRadius         Float                 @default(10) @map("max_radius") @db.Real // km
  preferredVehicleTypes VehicleType[]     @map("preferred_vehicle_types")
  
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  // Relations
  statusHistory     DriverStatusHistory[]
  
  @@index([driverStatus])
  @@index([rating])
  @@index([isVerified])
  @@index([currentLat, currentLng]) // Geospatial queries
  @@map("driver_profiles")
}

model Fleet {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  type        FleetType
  plateNumber String        @unique @map("plate_number")
  model       String
  brand       String
  year        Int
  color       String
  capacity    Int           @default(4)
  status      FleetStatus   @default(ACTIVE)
  vehicleType VehicleType   @map("vehicle_type")
  
  // Vehicle specifications
  engineNumber String?      @map("engine_number")
  chassisNumber String?     @map("chassis_number")
  registrationExpiry DateTime? @map("registration_expiry")
  insuranceExpiry DateTime? @map("insurance_expiry")
  lastMaintenanceAt DateTime? @map("last_maintenance_at")
  nextMaintenanceAt DateTime? @map("next_maintenance_at")
  
  // Pricing
  basePriceMultiplier Float @default(1.0) @map("base_price_multiplier") @db.Real
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  // Relations
  assignments FleetAssignment[]
  orders      Order[]

  @@index([status, vehicleType])
  @@index([type])
  @@index([plateNumber])
  @@map("fleets")
}

model FleetAssignment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  fleet     Fleet     @relation(fields: [fleetId], references: [id], onDelete: Cascade)
  fleetId   String    @map("fleet_id") @db.VarChar
  driver    User      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId  String    @map("driver_id") @db.VarChar
  isActive  Boolean   @default(true) @map("is_active")
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")

  @@unique([fleetId, driverId, isActive]) // One active assignment per fleet-driver
  @@index([fleetId, isActive])
  @@index([driverId, isActive])
  @@map("fleet_assignments")
}

model PricingRule {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name            String
  vehicleType     VehicleType @map("vehicle_type")
  baseFare        BigInt      @map("base_fare") // In cents/smallest currency unit
  perKmRate       BigInt      @map("per_km_rate")
  perMinuteRate   BigInt      @map("per_minute_rate")
  minimumFare     BigInt      @map("minimum_fare")
  surgeMultiplier Float       @default(1.0) @map("surge_multiplier") @db.Real
  
  // Time-based pricing
  isActive        Boolean     @default(true) @map("is_active")
  validFrom       DateTime    @map("valid_from")
  validTo         DateTime?   @map("valid_to")
  
  // Geofencing (optional)
  applicableAreas Json?       @map("applicable_areas") // GeoJSON polygons
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index([vehicleType, isActive])
  @@index([validFrom, validTo])
  @@map("pricing_rules")
}

model Order {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar

  // Relations
  fleet            Fleet               @relation(fields: [fleetId], references: [id])
  fleetId          String              @map("fleet_id") @db.VarChar
  driver           User                @relation("DriverOrders", fields: [driverId], references: [id])
  driverId         String              @map("driver_id") @db.VarChar
  customer         User?               @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId       String?             @map("customer_id") @db.VarChar

  // Order metadata
  orderNumber      String              @unique @map("order_number") // Human-readable order ID
  tripType         TripType            @default(INSTANT) @map("trip_type")
  scheduledAt      DateTime?           @map("scheduled_at")
  
  // Passenger details
  passengerName    String              @map("passenger_name")
  passengerPhone   String              @map("passenger_phone")
  specialRequests  String?             @map("special_requests")
  
  // Route information
  pickupAddress    String              @map("pickup_address")
  pickupLat        Float               @map("pickup_lat") @db.Real
  pickupLng        Float               @map("pickup_lng") @db.Real
  dropoffAddress   String              @map("dropoff_address")
  dropoffLat       Float               @map("dropoff_lat") @db.Real
  dropoffLng       Float               @map("dropoff_lng") @db.Real
  
  // Trip details
  requestedVehicleType VehicleType     @map("requested_vehicle_type")
  distanceMeters   Int?                @map("distance_meters")
  estimatedDurationMinutes Int?        @map("estimated_duration_minutes")
  actualDurationMinutes Int?           @map("actual_duration_minutes")

  // Fare calculation
  baseFare         BigInt              @map("base_fare")
  distanceFare     BigInt              @default(0) @map("distance_fare")
  timeFare         BigInt              @default(0) @map("time_fare")
  airportFare      BigInt              @default(0) @map("airport_fare")
  surgeFare        BigInt              @default(0) @map("surge_fare")
  additionalFare   BigInt              @default(0) @map("additional_fare")
  discount         BigInt              @default(0) @map("discount")
  totalFare        BigInt              @map("total_fare")
  
  // Payment
  paymentMethod    PaymentMethod       @map("payment_method")
  paymentStatus    PaymentStatus       @default(PENDING) @map("payment_status")

  // Status & timing
  status           OrderStatus         @default(PENDING)
  
  // Driver assignment
  driverAssignedAt DateTime?           @map("driver_assigned_at")
  driverAcceptedAt DateTime?           @map("driver_accepted_at")
  driverArrivedAt  DateTime?           @map("driver_arrived_at")
  tripStartedAt    DateTime?           @map("trip_started_at")
  tripCompletedAt  DateTime?           @map("trip_completed_at")
  
  // Cancellation
  cancelledAt      DateTime?           @map("cancelled_at")
  cancelledReason  String?             @map("cancelled_reason")
  cancellationFee  BigInt              @default(0) @map("cancellation_fee")
  
  // System fields
  idempotencyKey   String?             @unique @map("idempotency_key")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relations
  statusHistory    OrderStatusHistory[]
  payment          Payment?
  rating           Rating?

  @@index([customerId, status, createdAt])
  @@index([driverId, status, createdAt])
  @@index([status, scheduledAt])
  @@index([orderNumber])
  @@index([pickupLat, pickupLng]) // Geospatial queries
  @@map("orders")
}

model Location {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  name        String
  address     String
  lat         Float            @db.Real
  lng         Float            @db.Real
  category    LocationCategory @default(POPULAR)
  icon        String?
  description String?
  isActive    Boolean          @default(true) @map("is_active")
  searchCount Int              @default(0) @map("search_count") // For popularity tracking
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  
  // Relations
  userLocations UserLocation[]
  
  @@index([category, isActive])
  @@index([lat, lng]) // Geospatial queries
  @@index([searchCount]) // Popular locations
  @@map("locations")
}

model UserLocation {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String           @map("user_id") @db.VarChar
  location   Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String           @map("location_id") @db.VarChar
  category   LocationCategory @default(RECENT)
  alias      String?          // Custom name like "Home", "Office"
  accessCount Int             @default(0) @map("access_count")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  
  @@unique([userId, locationId])
  @@index([userId, category])
  @@map("user_locations")
}

model Rating {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String   @unique @map("order_id") @db.VarChar
  
  // Ratings (1-5 scale)
  ratedBy    User     @relation("UserRatings", fields: [ratedById], references: [id])
  ratedById  String   @map("rated_by_id") @db.VarChar
  ratedUser  User     @relation("DriverRatings", fields: [ratedUserId], references: [id])
  ratedUserId String  @map("rated_user_id") @db.VarChar
  
  rating     Int      // 1-5 stars
  comment    String?
  tags       String[] // ["clean_vehicle", "polite_driver", "fast_service"]
  
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@index([ratedUserId])
  @@index([rating])
  @@map("ratings")
}

model OrderStatusHistory {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String      @map("order_id") @db.VarChar
  fromStatus OrderStatus @map("from_status")
  toStatus  OrderStatus @map("to_status")
  reason    String?
  metadata  Json?       // Additional context data
  changedBy String?     @map("changed_by") // userId who changed (nullable for system)
  createdAt DateTime    @default(now()) @map("created_at")
  
  @@index([orderId, createdAt])
  @@map("order_status_histories")
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String        @unique @map("order_id") @db.VarChar
  
  // Payment details
  paymentMethod   PaymentMethod @map("payment_method")
  provider        String        // MIDTRANS, XENDIT, MANUAL, etc.
  providerId      String?       @map("provider_id")
  providerOrderId String?       @map("provider_order_id")
  
  // Amounts
  amount          BigInt
  platformFee     BigInt        @default(0) @map("platform_fee")
  driverEarning   BigInt        @default(0) @map("driver_earning")
  
  // Status
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?     @map("paid_at")
  
  // Additional data
  rawResponse     Json?         @map("raw_response")
  failureReason   String?       @map("failure_reason")
  refundAmount    BigInt        @default(0) @map("refund_amount")
  refundedAt      DateTime?     @map("refunded_at")
  
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  @@index([status, createdAt])
  @@index([provider, providerId])
  @@map("payments")
}

model Otp {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  phone     String
  codeHash  String   @map("code_hash")
  purpose   String   // register|login|reset|verify_phone
  attempts  Int      @default(0)
  maxAttempts Int    @default(3) @map("max_attempts")
  isUsed    Boolean  @default(false) @map("is_used")
  userId    String?  @map("user_id") @db.VarChar // Nullable for registration
  user      User?    @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@index([phone, purpose, isUsed])
  @@index([expiresAt])
  @@map("otps")
}

model RefreshToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id") @db.VarChar
  tokenHash  String   @unique @map("token_hash")
  deviceId   String?  @map("device_id") // For device-specific tokens
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  revokedAt  DateTime? @map("revoked_at")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")
  
  @@index([userId, isRevoked])
  @@index([tokenHash])
  @@map("refresh_tokens")
}

model DriverStatusHistory {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  driverId     String        @map("driver_id") @db.VarChar
  driver       DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  fromStatus   DriverStatus  @map("from_status")
  toStatus     DriverStatus  @map("to_status")
  reason       String?
  metadata     Json?         // Additional context
  changedBy    String?       @map("changed_by") // adminId or userId who triggered
  createdAt    DateTime      @default(now()) @map("created_at")

  @@index([driverId, createdAt])
  @@index([toStatus, createdAt])
  @@map("driver_status_histories")
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  action     String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource   String   // users, orders, fleets, etc.
  resourceId String?  @map("resource_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @map("user_id") @db.VarChar // Nullable for system actions
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@index([resource, action, createdAt])
  @@index([userId, createdAt])
  @@index([createdAt]) // For cleanup jobs
  @@map("audit_logs")
}

// Configuration and system tables
model AppConfig {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  key         String   @unique
  value       String
  description String?
  type        String   @default("string") // string, number, boolean, json
  isPublic    Boolean  @default(false) @map("is_public") // Can be accessed by frontend
  updatedBy   String?  @map("updated_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([key])
  @@index([isPublic])
  @@map("app_configs")
}